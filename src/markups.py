import math

from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup


def leave_registration_request_markup():
    markup = InlineKeyboardMarkup()
    start_registration_button = InlineKeyboardButton(text="üîµ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                                                     callback_data="start_registration")
    markup.add(start_registration_button)

    return markup


def admin_tg_profile_open_markup():
    markup = InlineKeyboardMarkup()

    link_button = InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                                       url="t.me/rgal1ev")

    markup.add(link_button)

    return markup

def get_registration_requests_list_markup():
    markup = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏",
                                  callback_data="open_registrations_list")
    markup.add(button)

    return markup


def registration_requests_list_markup(requests):
    markup = InlineKeyboardMarkup()

    for request in requests:
        request_button = InlineKeyboardButton(text=f"{request['name']}",
                                              callback_data=f"registration_request:{request['id']}")
        markup.add(request_button)

    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(profile_button)

    return markup


def employees_without_telegram_id_list_markup(employees):
    markup = InlineKeyboardMarkup()

    for employee in employees:
        employee_button = InlineKeyboardButton(text=f"{employee['firstname']}",
                                               callback_data=f"handling_registration_employee:{employee['id']}")

        markup.add(employee_button)

    back_button = InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                       callback_data="open_registrations_list")

    markup.add(back_button)

    return markup


def registration_request_action_markup():
    markup = InlineKeyboardMarkup()
    accept_button = InlineKeyboardButton(text="üü¢ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É",
                                         callback_data=f"accept_registration_request")

    decline_button = InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
                                          callback_data=f"decline_registration_request")

    back_button = InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                       callback_data="open_registrations_list")

    markup.add(accept_button)
    markup.add(decline_button)
    markup.add(back_button)

    return markup


def accept_request_handling_markup():
    markup = InlineKeyboardMarkup()

    button = InlineKeyboardButton(text="üü¢ –î–∞",
                                  callback_data=f"accept_employee_handling")

    second_button = InlineKeyboardButton(text="üî¥ –ù–µ—Ç",
                                         callback_data=f"accept_registration_request")

    markup.add(button)
    markup.add(second_button)

    return markup


def employee_action_markup(employee):
    markup = InlineKeyboardMarkup()

    delete_button = InlineKeyboardButton(text="üî¥ –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                         callback_data=f"delete_employee:{employee['id']}")

    if employee["telegram_id"] is not None:
        unhandle_button = InlineKeyboardButton(text="‚≠ï –û—Ç–≤—è–∑–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º",
                                               callback_data=f"unhandle_employee:{employee['id']}")
        markup.add(unhandle_button)

    back_button = InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                       callback_data="open_employees_list")

    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(delete_button)
    markup.add(back_button, profile_button)

    return markup


def employees_list(employees, page):
    markup = InlineKeyboardMarkup()

    employees = sorted(employees, key=lambda dict: dict['id'])

    page = int(page)
    previous_page = None
    max_employees_count = 4
    max_page = math.ceil(len(employees) / max_employees_count)

    if page == 1:
        previous_page = 0

    else:
        previous_page = page - 1

    page_employees = employees[previous_page * max_employees_count:page * max_employees_count]

    for employee in page_employees:
        employee_button = InlineKeyboardButton(text=f"‚Ññ{employee['id']} {employee['lastname']} {employee['firstname'][0]}.",
                                               callback_data=f"employee_card:{employee['id']}")

        markup.add(employee_button)

    if page == 1:
        next_page_button = InlineKeyboardButton(text="‚ñ∂",

                                                callback_data=f"open_employees_list:{page + 1}")
        markup.add(next_page_button)

    elif page == max_page:
        previous_page_button = InlineKeyboardButton(text="‚óÄ",
                                                    callback_data=f"open_employees_list:{page - 1}")
        markup.add(previous_page_button)

    else:
        next_page_button = InlineKeyboardButton(text="‚ñ∂",
                                                callback_data=f"open_employees_list:{page + 1}")

        previous_page_button = InlineKeyboardButton(text="‚óÄ",
                                                callback_data=f"open_employees_list:{page - 1}")

        markup.add(previous_page_button, next_page_button)

    add_employee_button = InlineKeyboardButton(text="‚ú≥ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                               callback_data="on_development")

    markup.add(add_employee_button)

    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(profile_button)

    return markup


def subjects_list(subjects, page, is_admin):
    markup = InlineKeyboardMarkup()

    subjects = sorted(subjects, key=lambda dict: dict['id'])

    page = int(page)
    previous_page = None
    max_objects_count = 4
    max_page = math.ceil(len(subjects) / max_objects_count)

    if page == 1:
        previous_page = 0

    else:
        previous_page = page - 1

    page_subjects = subjects[previous_page * max_objects_count:page * max_objects_count]

    for subject in page_subjects:
        object_button = InlineKeyboardButton(text=f"{subject['title']} - {subject['code']}",
                                             callback_data=f"subject_card:{subject['id']}")

        markup.add(object_button)

    if page == 1:
        next_page_button = InlineKeyboardButton(text="‚ñ∂",
                                                callback_data=f"open_subjects_list:{page + 1}")
        markup.add(next_page_button)

    elif page == max_page:
        previous_page_button = InlineKeyboardButton(text="‚óÄ",
                                                    callback_data=f"open_subjects_list:{page - 1}")
        markup.add(previous_page_button)

    else:
        next_page_button = InlineKeyboardButton(text="‚ñ∂",
                                                callback_data=f"open_subjects_list:{page + 1}")

        previous_page_button = InlineKeyboardButton(text="‚óÄ",
                                                    callback_data=f"open_subjects_list:{page - 1}")

        markup.add(previous_page_button, next_page_button)

    if is_admin:
        add_employee_button = InlineKeyboardButton(text="‚ú≥ –î–æ–±–∞–≤–∏—Ç—å –æ–±—å–µ–∫—Ç",
                                                   callback_data="on_development")
        markup.add(add_employee_button)

    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(profile_button)

    return markup


def open_profile_markup():
    markup = InlineKeyboardMarkup()
    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(profile_button)
    return markup


def admin_profile_markup():
    markup = InlineKeyboardMarkup()
    requests_button = InlineKeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                                                 callback_data="open_registrations_list")

    feedback_button = InlineKeyboardButton(text="‚ö° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã",
                                                 callback_data="on_development")
    instrumentations_button = InlineKeyboardButton(text="üîå –ü—Ä–∏–±–æ—Ä—ã",
                                                         callback_data="open_instrumentation_list")
    employees_button = InlineKeyboardButton(text="üë® –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏",
                                                  callback_data="open_employees_list")

    journals_button = InlineKeyboardButton(text="üìÉ –ñ—É—Ä–Ω–∞–ª—ã",
                                           callback_data="journals")

    subjects_button = InlineKeyboardButton(text="‚ö´ –û–±—ä–µ–∫—Ç—ã",
                                                 callback_data="open_subjects_list")
    send_mail_button = InlineKeyboardButton(text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                                                  callback_data="mail")

    more_button = InlineKeyboardButton(text="‚ú≥ –ï—â–µ",
                                       callback_data="on_development")

    contacts_button = InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
                                    callback_data="contacts")

    hide_message_button = InlineKeyboardButton(text="üëÅ –°–∫—Ä—ã—Ç—å",
                                                     callback_data="hide")

    markup.add(requests_button)
    markup.add(employees_button, journals_button)
    markup.add(instrumentations_button, subjects_button)
    markup.add(feedback_button)
    markup.add(send_mail_button)
    markup.add(more_button)
    markup.add(contacts_button, hide_message_button)

    return markup


def user_profile_markup():
    markup = InlineKeyboardMarkup()

    all_instrumentals = InlineKeyboardButton(text="üîå –ü—Ä–∏–±–æ—Ä—ã",
                                             callback_data="open_instrumentation_types")

    subjects_button = InlineKeyboardButton(text="‚ö´ –û–±—ä–µ–∫—Ç—ã",
                                           callback_data="open_subjects_list")

    feedback_button = InlineKeyboardButton(text="‚ö° –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
                                           callback_data="feedback")

    get_employee_help_button = InlineKeyboardButton(text="üü° –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å",
                                                    callback_data="on_development")

    more_button = InlineKeyboardButton(text="‚ú≥ –ï—â–µ",
                                       callback_data="on_development")

    contacts_button = InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
                                    callback_data="contacts")

    hide_message_button = InlineKeyboardButton(text="üëÅ –°–∫—Ä—ã—Ç—å",
                                               callback_data="hide")

    markup.add(all_instrumentals, subjects_button)
    markup.add(feedback_button)
    markup.add(get_employee_help_button)
    markup.add(more_button)
    markup.add(contacts_button, hide_message_button)

    return markup

def hide_message(message_id):
    markup = InlineKeyboardMarkup()

    hide_message_button = InlineKeyboardButton(text="üëÅ –°–∫—Ä—ã—Ç—å",
                                               callback_data=f"hide:{message_id}")

    markup.add(hide_message_button)

    return markup

def journals_list():
    markup = InlineKeyboardMarkup()

    repairs_button = InlineKeyboardButton(text="üõ† –†–µ–º–æ–Ω—Ç—ã",
                                           callback_data="on_development")

    calibrations_button = InlineKeyboardButton(text="‚öô –ü–æ–≤–µ—Ä–∫–∏",
                                               callback_data="on_development")

    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(repairs_button)
    markup.add(calibrations_button)
    markup.add(profile_button)

    return markup


def open_instrumental_types():
    markup = InlineKeyboardMarkup()

    my_repairs_button = InlineKeyboardButton(text="üîå –ú–æ–∏ –ø—Ä–∏–±–æ—Ä—ã",
                                             callback_data="open_employee_instrumentation")

    all_repairs_button = InlineKeyboardButton(text="üîå –í—Å–µ –ø—Ä–∏–±–æ—Ä—ã",
                                              callback_data="open_instrumentation_list")

    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(my_repairs_button)
    markup.add(all_repairs_button)
    markup.add(profile_button)

    return markup


def instrumental_list(instrumentations, is_admin):
    markup = InlineKeyboardMarkup()

    for instrumentation in instrumentations:
        instrumentation_title = ""

        if instrumentation['status_id'] == 2:
            instrumentation_title = f"üî¥ {instrumentation['title']} - –ù–∞ —Ä–µ–º–æ–Ω—Ç–µ"

        else:
            instrumentation_title = f"üü¢ {instrumentation['title']}"

        instrumentation_button = InlineKeyboardButton(text=instrumentation_title,
                                                      callback_data=f"instrumentation:{instrumentation['id']}")
        markup.add(instrumentation_button)

    if is_admin:
        add_instrumentation_button = InlineKeyboardButton(text="‚ú≥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±–æ—Ä",
                                                          callback_data="add_new_instrumentation")
        markup.add(add_instrumentation_button)

    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(profile_button)

    return markup

def instrumentation_action(instrumentation, isAllowedToEdit):
    markup = InlineKeyboardMarkup()

    if instrumentation['status_id'] == 2:
        back_from_repair_button = InlineKeyboardButton(text="üõ†üü¢ –í–µ—Ä–Ω—É—Ç—å —Å —Ä–µ–º–æ–Ω—Ç–∞",
                                                       callback_data=f"return_from_repair:{instrumentation['id']}")
        markup.add(back_from_repair_button)

    else:
        repair_button = InlineKeyboardButton(text="üõ† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç",
                                             callback_data=f"set_on_repair:{instrumentation['id']}")

        calibration_button = InlineKeyboardButton(text="‚öô –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ—Ä–∫—É",
                                                  callback_data="on_development")

        markup.add(repair_button)
        markup.add(calibration_button)

    barcode_button = InlineKeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥",
                                          callback_data=f"show_barcode:{instrumentation['id']}")

    back_button = InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                       callback_data="open_instrumentation_list")

    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(barcode_button)

    if isAllowedToEdit:
        delete_button = InlineKeyboardButton(text="üî¥ –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–±–æ—Ä",
                                             callback_data=f"delete_instrumentation:{instrumentation['id']}")
        markup.add(delete_button)

    markup.add(back_button, profile_button)

    return markup


def subject_action(subject, is_admin):
    markup = InlineKeyboardMarkup()

    if is_admin:
        delete_subject_button = InlineKeyboardButton(text="üî¥ –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç",
                                                     callback_data="on_development")

        markup.add(delete_subject_button)

    back_button = InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                       callback_data="open_subjects_list")

    open_in_map = InlineKeyboardButton(text="üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                                       callback_data=f"open_subject_in_map:{subject['id']}")

    profile_button = InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                          callback_data="profile")

    markup.add(open_in_map)
    markup.add(back_button, profile_button)

    return markup


def instrumentation_types_list(instrumentation_types, page):
    markup = InlineKeyboardMarkup()

    instrumentation_types = sorted(instrumentation_types, key=lambda dict: dict['id'])

    page = int(page)
    previous_page = None
    max_instrumentation_count = 4
    max_page = math.ceil(len(instrumentation_types) / max_instrumentation_count)

    if page == 1:
        previous_page = 0

    else:
        previous_page = page - 1

    page_instrumentations = instrumentation_types[previous_page * max_instrumentation_count:page * max_instrumentation_count]

    for instrumentation in page_instrumentations:
        object_button = InlineKeyboardButton(text=f"{instrumentation['title']}",
                                             callback_data=f"new_instrumentation_type_handling:{instrumentation['id']}")

        markup.add(object_button)

    if page == max_page and page == 1:
        return markup

    if page == 1:
        next_page_button = InlineKeyboardButton(text="‚ñ∂",
                                                callback_data=f"open_new_instrumentation_type_list:{page + 1}")
        markup.add(next_page_button)

    elif page == max_page:
        previous_page_button = InlineKeyboardButton(text="‚óÄ",
                                                    callback_data=f"open_new_instrumentation_type_list:{page - 1}")
        markup.add(previous_page_button)

    else:
        next_page_button = InlineKeyboardButton(text="‚ñ∂",
                                                callback_data=f"open_new_instrumentation_type_list:{page + 1}")

        previous_page_button = InlineKeyboardButton(text="‚óÄ",
                                                    callback_data=f"open_new_instrumentation_type_list:{page - 1}")

        markup.add(previous_page_button, next_page_button)

    return markup


def adding_new_instrumentation_action():
    markup = InlineKeyboardMarkup()

    add_button = InlineKeyboardButton(text="üü¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±–æ—Ä",
                                      callback_data="accept_instrumentation_adding")

    cancel_button = InlineKeyboardButton(text="üî¥ –û—Ç–º–µ–Ω–∏—Ç—å",
                                         callback_data="cancel")

    markup.add(add_button)
    markup.add(cancel_button)

    return markup

def cancel_markup():
    markup = InlineKeyboardMarkup()

    cancel_button = InlineKeyboardButton(text="üî¥ –û—Ç–º–µ–Ω–∏—Ç—å",
                                         callback_data="cancel")

    markup.add(cancel_button)

    return markup